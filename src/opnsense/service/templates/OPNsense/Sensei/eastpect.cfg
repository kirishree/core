# DO NOT EDIT THIS FILE -- this is an auto-generated file

[General]
rootDir = /usr/local/sensei/
workersMap = etc/workers.map
csvDelimiter = ,
coreFileEnable = {{ OPNsense.Sensei.general.coreFileEnable if helpers.exists('OPNsense.Sensei.general.coreFileEnable') else 'false' }}
develFeaturesEnable = false
memDiskSize = auto
flavor = {{ OPNsense.Sensei.general.flavor if helpers.exists('OPNsense.Sensei.general.flavor') else 'small' }}
shun_vlans = {{ OPNsense.Sensei.shun.vlans if helpers.exists('OPNsense.Sensei.shun.vlans') else '' }}
shun_networks = {{ OPNsense.Sensei.shun.networks if helpers.exists('OPNsense.Sensei.shun.networks') else '' }}
bypassEnable = {{ OPNsense.Sensei.bypass.enable if helpers.exists('OPNsense.Sensei.bypass.enable') else '' }}
bypassModeOn = {{ OPNsense.Sensei.bypass.mode if helpers.exists('OPNsense.Sensei.bypass.mode') else '' }}
TempSize = {{ OPNsense.Sensei.general.SenseiTempSize if helpers.exists('OPNsense.Sensei.general.SenseiTempSize') else '50' }}

[Enrich]
;enable IP <-> Username Enrichment
usernameEnrich = {{ OPNsense.Sensei.enrich.user if helpers.exists('OPNsense.Sensei.enrich.user') else  'false'}}
;enable IPv4 <-> Hostname mapping from DNS responses
dnsEnrich = {{ OPNsense.Sensei.enrich.dns if helpers.exists('OPNsense.Sensei.enrich.dns') else  'false' }}
;number of seconds a map will live in dns enrichment cache
dnsEnrichTTL = 3600
;enable / disable in-flight dns enrichment
dnsEnrichInFlight = {{ OPNsense.Sensei.dnsEncrihmentConfig.reverse if helpers.exists('OPNsense.Sensei.dnsEncrihmentConfig.reverse') else 'false' }}
; Dns Enrichment Servers set none if no servers
dnsEnrichmentServers = {{ OPNsense.Sensei.dnsEncrihmentConfig.servers if helpers.exists('OPNsense.Sensei.dnsEncrihmentConfig.servers') else '' }}

geoIPEnrich = true
geoIPDirectory = db/GeoIP/
countryEnrich = true
cityEnrich = true
regionEnrich = true 
postalCodeEnrich = false
coordinatesEnrich = true
areaCodeEnrich = false
metroCodeEnrich = false
asnEnrich = true

webCategoryDirectory = db/Webcat/
userWebCategoryDirectory = userdefined/db/Webcat/

userAgentEnrich = false
userAgentDirectory = db/UA/
cloudWebcatEnrich = {{ OPNsense.Sensei.enrich.cloudWebcatEnrich if helpers.exists('OPNsense.Sensei.enrich.cloudWebcatEnrich') else 'false' }}
cloudNoQueryDomains = {{ OPNsense.Sensei.dns.localDomain if helpers.exists('OPNsense.Sensei.dns.localDomain') else 'intra.example.com' }}
cloudResponseTimeout = {{ OPNsense.Sensei.enrich.cloudResponseTimeout if helpers.exists('OPNsense.Sensei.enrich.cloudResponseTimeout') else '0' }}

tcpServiceEnable = {{ OPNsense.Sensei.enrich.tcpServiceEnable if helpers.exists('OPNsense.Sensei.enrich.tcpServiceEnable') else 'true' }}
tcpServiceAddress = run/mgmt.sock

[Classify]
enable = true
parserEnable = true
httpParserEnable = true
;Number of packets to try to classify
maxTries = 10
databaseDirectory = DynamicClassifier/

[Output]
enabled = false
streamEnabled = true
; logInterval time must be one of these options:
; 1m = 1 minute
; 5m = 5 minutes
; 10m = 10 minutes
; 1h = 1 hour
; 1d = 1 day
; 1w = 1 week
; 1M = 1 month
logInterval = 1d
format = JSON
; Number of protocol informations to buffer in memory if TCP connection is ever lost
ipdrSaveBufferSize = 2000

; timeout value to flush ipdr records
ipdrFlushTimeout = 00:01:00

[Logger]
archiveDir = log/archive
autoFlush = true
; appRotation time must be one of these options:
; 1m = 1 minute
; 5m = 5 minutes
; 10m = 10 minutes
; 1h = 1 hour
; 1d = 1 day
; 1w = 1 week
; 1M = 1 month
appRotationTime = {{ OPNsense.Sensei.logger.rotation if helpers.exists('OPNsense.Sensei.logger.rotation') else '1d' }}

; possible values CRITICAL, ERROR, WARNING, DEBUG, DEBUG1, DEBUG2, DEBUG3, DEBUG4, DEBUG5
severityLevel = {{ OPNsense.Sensei.logger.severityLevel if helpers.exists('OPNsense.Sensei.logger.severityLevel') else 'INFO' }}

; log file max age default 15 day
retire = {{ OPNsense.Sensei.logger.retire if helpers.exists('OPNsense.Sensei.logger.retire') else '15' }}

[IP]
; Disable IP Checksum Control
disableChecksum = true

[Tcp]
; Connections deemed stale
staleTimeout = 600

; Syn Filter Context Table Size
maxSynfContext = 10000

; How many stale timeouts needed to close the conn
staleCount = 2

; Conn establishment timeout
handshakeTimeout = 5

; In milisecs. How much time we await a missing piece
reassTimeout = 100

; reassembly queue maximum length
reassMaxQueueLength = 100

; Enable TCP L2
enableL2 = false

; Disable TCP Checksum Control
disableChecksum = true

[Udp]
idleTimeout = 120

; Disable UDP Checksum Control
disableChecksum = true

[Http]


[Dns]
; Enable / Disable Active DNS
enableActiveDNS = false

; DNS Connection Idle Timeout
idleTimeout = 10

; Average Response Time treshhold
; in seconds
averageResponseTime = 2

; Average Success Rate treshhold
; requests / response rate
averageSuccessRate = 0.70

; Re-check initial timeout
recheckTimeout = 100


[TLS]
enabled = {{ OPNsense.Sensei.tls.enabled if helpers.exists('OPNsense.Sensei.tls.enabled') else 'false' }}
defaultInspect = {{ OPNsense.Sensei.tls.enabled if helpers.exists('OPNsense.Sensei.tls.enabled') else 'false' }}
caKeyFile = internal_ca.key
caCertFile = internal_ca.pem

; whether to use Diffie Hellman or not
useDH = true

; Diffie Hellman directory
dhDir = /dh

; use random generated Diffie Hellman parameters
; if dh directory contains multiple Diffie Hellman pem formatted files random selection will be used if this option is enabled
; otherwise first dh file will be used!
useRandomDH = true


systemCertChainLocation = auto
;systemCertChainLocation = /usr/local/share/certs/ca-root-nss.crt
;systemCertChainLocation = /etc/ssl/certs

; client connection policy if TLS verification fails
; possible values are: DROP, IGNORE, REFLECT
; (case insensitive)
policy = REFLECT
;ciphers = HIGH:!MEDIUM:!LOW:!aNULL:!eNULL:!SHA1:!EXPORT:!MD5:!RC4
ciphers = "ALL:!aNULL:!eNULL"

[Netflow]
enabled = {{ OPNsense.Sensei.netflow.enabled if helpers.exists('OPNsense.Sensei.netflow.enabled') else 'false' }}
version = {{ OPNsense.Sensei.netflow.version if helpers.exists('OPNsense.Sensei.netflow.version') else '9' }}
collectorIP = {{ OPNsense.Sensei.netflow.collectorip if helpers.exists('OPNsense.Sensei.netflow.collectorip') else '127.0.0.1' }}
collectorPort = {{ OPNsense.Sensei.netflow.collectorport if helpers.exists('OPNsense.Sensei.netflow.collectorport') else '9996' }}

; ES : elasticsearch MN: Mongodb SQ:sqlite.
[Database]
type = {{ OPNsense.Sensei.general.database.Type if helpers.exists('OPNsense.Sensei.general.database.Type') else 'ES' }}
remote = {{ OPNsense.Sensei.general.database.Remote if helpers.exists('OPNsense.Sensei.general.database.Remote') else 'false' }}
retireAfter = {{ OPNsense.Sensei.general.database.retireAfter if helpers.exists('OPNsense.Sensei.general.database.retireAfter') else '2' }}
dbpath = {{ OPNsense.Sensei.general.database.dbpath if helpers.exists('OPNsense.Sensei.general.database.dbpath') else '/usr/local/datastore/sqlite' }}

[ElasticSearch]
enabled = true
connIndex = conn
httpIndex = http
dnsIndex = dns
tlsIndex = tls
sipIndex = sip
alertIndex = alert
apiEndPointIP = {{ OPNsense.Sensei.general.database.Host if helpers.exists('OPNsense.Sensei.general.database.Host') else 'http://127.0.0.1' }}
apiEndPointPort = {{ OPNsense.Sensei.general.database.Port if helpers.exists('OPNsense.Sensei.general.database.Port') else '9200' }}
apiEndPointVersion = {{ OPNsense.Sensei.general.database.Version if helpers.exists('OPNsense.Sensei.general.database.Version') else '56800' }}
apiEndPointPrefix = {{ OPNsense.Sensei.general.database.Prefix if helpers.exists('OPNsense.Sensei.general.database.Prefix') else '' }}
apiEndPointUser = {{ OPNsense.Sensei.general.database.User if helpers.exists('OPNsense.Sensei.general.database.User') else '' }}
apiEndPointPass = {{ OPNsense.Sensei.general.database.Pass if helpers.exists('OPNsense.Sensei.general.database.Pass') else '' }}
; set bulkBufferSize 0 to disable bulk writes
bulkBufferSize = 100

[Service]
;Background Daemon?
daemonEnable = false
refreshInterval = 0

[Rules]
enabled = true
rulesDirectory = db/policy/Rules
userRulesDirectory = userdefined/policy/Rules

[Updater]
signatureUpdatesEnabled = {{ OPNsense.Sensei.updater.enabled if helpers.exists('OPNsense.Sensei.updater.enabled') else 'true' }}
softwareUpdatesEnabled = {{ OPNsense.Sensei.updater.enabled if helpers.exists('OPNsense.Sensei.updater.autocheck') else 'true' }}

[Watchdog]
enabled = {{ OPNsense.Sensei.general.heartbeatMonit if helpers.exists('OPNsense.Sensei.general.heartbeatMonit') else 'false' }}
timeout = 20
hardwareBypassEnable = {{ OPNsense.Sensei.general.hwbypass if helpers.exists('OPNsense.Sensei.general.hwbypass') else 'false' }}
hardwareBypassTimeout = 5
# number of icmp packets to be watched
numICMP = 100

# number of seconds to receive all numICMP packets
icmpWindow = 1

[StreamReport]
enabled = {{ OPNsense.Sensei.streamReportConfig.enabled if helpers.exists('OPNsense.Sensei.streamReportConfig.enabled') else 'false' }}
# syslog server ip or hostname
server = {{ OPNsense.Sensei.streamReportConfig.server if helpers.exists('OPNsense.Sensei.streamReportConfig.server') else '' }}
# syslog port default 514
port = {{ OPNsense.Sensei.streamReportConfig.port if helpers.exists('OPNsense.Sensei.streamReportConfig.port') else '514' }}
# protocol UDP or TCP
protocol = {{ OPNsense.Sensei.streamReportConfig.protocol if helpers.exists('OPNsense.Sensei.streamReportConfig.protocol') else 'UDP' }}
# indexes for sending
indexes = {{ OPNsense.Sensei.streamReportConfig.indexes if helpers.exists('OPNsense.Sensei.streamReportConfig.indexes') else '' }}

[StreamReportExternal]
enabled = {{ OPNsense.Sensei.streamReportDataExternal.enabled if helpers.exists('OPNsense.Sensei.streamReportDataExternal.enabled') else 'false' }}
# External elastic search server ip or hostname
uri = {{ OPNsense.Sensei.streamReportDataExternal.uri if helpers.exists('OPNsense.Sensei.streamReportDataExternal.uri') else '' }}
uriUser = {{ OPNsense.Sensei.streamReportDataExternal.User if helpers.exists('OPNsense.Sensei.streamReportDataExternal.User') else '' }}
uriPass = {{ OPNsense.Sensei.streamReportDataExternal.Pass if helpers.exists('OPNsense.Sensei.streamReportDataExternal.Pass') else '' }}
version = {{ OPNsense.Sensei.streamReportDataExternal.esVersion if helpers.exists('OPNsense.Sensei.streamReportDataExternal.esVersion') else '' }}


[Anonymize]
localAddress = {{ OPNsense.Sensei.anonymize.localAddress if helpers.exists('OPNsense.Sensei.anonymize.localAddress') else 'false' }}
remoteAddress = {{ OPNsense.Sensei.anonymize.remoteAddress if helpers.exists('OPNsense.Sensei.anonymize.remoteAddress') else 'false' }}

[senpai]
# node-uuid = {{ OPNsense.Sensei.general.CloudManagementUUID if helpers.exists('OPNsense.Sensei.general.CloudManagementUUID') else '' }}
nab-base-address = https://nab.sunnyvalley.cloud
node-register-address = https://sunnyvalley.cloud
token-file-path = etc/token
admin-email = {{ OPNsense.Sensei.general.CloudManagementAdmin if helpers.exists('OPNsense.Sensei.general.CloudManagementAdmin') else '' }}
core-enabled = false
centralManagement= {{ OPNsense.Sensei.zenconsole.centralManagement if helpers.exists('OPNsense.Sensei.zenconsole.centralManagement') else 'true' }}
reportInfrastructureErrors= {{ OPNsense.Sensei.zenconsole.reportInfastructureError if helpers.exists('OPNsense.Sensei.zenconsole.reportInfastructureError') else 'true' }}

[restapi]
port = 8090
enabled = {{ OPNsense.Sensei.agentrestapi.enabled if helpers.exists('OPNsense.Sensei.agentrestapi.enabled') else 'false' }}
key-file = restapikey.pem
cert-file = restapicert.pem

[Health]
health-check = {{ OPNsense.Sensei.general.healthCheck if helpers.exists('OPNsense.Sensei.general.healthCheck') else 'true' }}
health-share = {{ OPNsense.Sensei.general.healthShare if helpers.exists('OPNsense.Sensei.general.healthShare') else 'true' }}
health-timer = {{ OPNsense.Sensei.general.healthTimer if helpers.exists('OPNsense.Sensei.general.healthTimer') else '*/5' }}
